(window.webpackJsonp=window.webpackJsonp||[]).push([[2022],{"90nN":function(e,n,o){"use strict";o.r(n),o.d(n,"_frontmatter",(function(){return l})),o.d(n,"default",(function(){return y}));o("3bBZ"),o("q1tI");var a=o("7ljp"),t=o("013z");o("qKvR");function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(e[a]=o[a])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}const l={},s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",n)},b=s("PageDescription"),i=s("InlineNotification"),p=s("AnchorLinks"),u=s("AnchorLink"),m=s("Row"),d=s("Column"),h=s("ResourceCard"),g=s("MdxIcon"),j={_frontmatter:l},O=t.a;function y(e){let{components:n}=e,o=c(e,["components"]);return Object(a.b)(O,r({},j,o,{components:n,mdxType:"MDXLayout"}),Object(a.b)(b,{mdxType:"PageDescription"},Object(a.b)("p",null,"The Carbon color package helps teams build engaging digital experiences through\nconsistent application of color.")),Object(a.b)(i,{mdxType:"InlineNotification"},Object(a.b)("p",null,"If you’re using carbon-components there’s no reason to install the color package\nseparately. See our ",Object(a.b)("a",r({parentName:"p"},{href:"/get-started/develop/react"}),"get started")," guide to start\nbuilding.")),Object(a.b)(p,{mdxType:"AnchorLinks"},Object(a.b)(u,{mdxType:"AnchorLink"},"Getting started"),Object(a.b)(u,{mdxType:"AnchorLink"},"Usage"),Object(a.b)(u,{mdxType:"AnchorLink"},"Resources")),Object(a.b)("h2",null,"Getting started"),Object(a.b)("p",null,"To install ",Object(a.b)("inlineCode",{parentName:"p"},"@carbon/colors")," in your project, you will need to run the following\ncommand using ",Object(a.b)("a",r({parentName:"p"},{href:"https://www.npmjs.com/"}),"npm"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"npm install -S @carbon/colors\n")),Object(a.b)("p",null,"If you prefer ",Object(a.b)("a",r({parentName:"p"},{href:"https://yarnpkg.com/en/"}),"Yarn"),", use the following command\ninstead:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"yarn add @carbon/colors\n")),Object(a.b)("h2",null,"Usage"),Object(a.b)("p",null,"You can use the ",Object(a.b)("inlineCode",{parentName:"p"},"@carbon/colors")," module in your JavaScript, in addition to your\nSass."),Object(a.b)("h3",null,"Sass"),Object(a.b)("p",null,"In Sass, you can import the files individual by doing:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"@import '@carbon/colors/scss/colors';\n")),Object(a.b)("p",null,"This file automatically includes the ",Object(a.b)("inlineCode",{parentName:"p"},"carbon--colors")," mixin which initializes\nall the color variables for the IBM Design Language."),Object(a.b)("p",null,"These color variables follow the naming convention: ",Object(a.b)("inlineCode",{parentName:"p"},"$carbon--<swatch>-<grade>"),".\nFor example:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"$carbon--blue-50;\n$carbon--cool-gray-10;\n$carbon--black-100;\n$carbon--white-0;\n")),Object(a.b)("p",null,"You can also use the shorthand form of these colors by dropping the ",Object(a.b)("inlineCode",{parentName:"p"},"carbon--"),"\nnamespace:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"$blue-50;\n$cool-gray-10;\n$black-100;\n$white-0;\n")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Note: the shorthand variables require that you do not have any other\nconflicting variables in your setup. Namespaced variables are always preferred\nfor this reason, unless you are confident that no collisions will occur.")),Object(a.b)("p",null,"If you would like you choose when these variables are defined, then you can call\nthe ",Object(a.b)("inlineCode",{parentName:"p"},"carbon--colors")," mixin directly by importing the following file:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"@import '@carbon/colors/scss/mixins';\n\n// ...\n@include carbon--colors();\n")),Object(a.b)("p",null,"Alongside the color variables detailed above, we also provide a map of colors so\nthat you can programmatically use these values. This map is called\n",Object(a.b)("inlineCode",{parentName:"p"},"$carbon--colors")," and each key is the name of a swatch. The value of these\nswatches is also a map, but each key is now the grade. In code, this looks like\nthe following:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"$carbon--colors: (\n  'blue': (\n    10: #edf4ff,\n    // ...\n  )\n);\n")),Object(a.b)("p",null,"You can include this variable by including ",Object(a.b)("inlineCode",{parentName:"p"},"@carbon/colors/scss/colors")," or\ncalling the ",Object(a.b)("inlineCode",{parentName:"p"},"carbon--colors()")," mixin directly."),Object(a.b)("h4",null,"Migrating from previous versions"),Object(a.b)("p",null,"If you were originally using a project that had color variables defined as\n",Object(a.b)("inlineCode",{parentName:"p"},"$ibm-color__<swatch>-<grade>"),", or are relying on ",Object(a.b)("inlineCode",{parentName:"p"},"$ibm-color-map"),", you can also\nuse the entrypoint described above to access these colors. They are meant as an\neasier way to help adopt these packages. However, these variables will be\nremoved in the next release of Carbon."),Object(a.b)("p",null,"Similar to previous efforts, we also provide colors in the formats mentioned\nabove. For example:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"$ibm-color__blue-50;\n$ibm-color__warm-gray-100;\n")),Object(a.b)("p",null,"If you would like a mixin to conditionally include these variables, you can\ninclude the mixin by using:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-scss"}),"@import '@carbon/colors/scss/mixins';\n\n@include ibm--colors();\n")),Object(a.b)("h3",null,"JavaScript"),Object(a.b)("p",null,"For JavaScript, you can import and use this module by doing the following in\nyour code:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// ESM\nimport { black, blue, warmGray } from '@carbon/colors';\n\n// CommonJS\nconst { black, blue, warmGray } = require('@carbon/colors');\n")),Object(a.b)("p",null,"Each color swatch is exported as a variable, and each color name is also\nexported as an object that can be called by specifying grade, for example:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"black;\nblue[50]; // Using the `blue` object.\nwarmGray100; // Using the `warmGray100` variable.\n")),Object(a.b)("h2",null,"Resources"),Object(a.b)(m,{className:"resource-card-group",mdxType:"Row"},Object(a.b)(d,{colMd:4,colLg:4,noGutterSm:!0,mdxType:"Column"},Object(a.b)(h,{subTitle:"Carbon color package",href:"https://github.com/carbon-design-system/carbon/blob/master/packages/colors",mdxType:"ResourceCard"},Object(a.b)(g,{name:"github",mdxType:"MdxIcon"}))),Object(a.b)(d,{colMd:4,colLg:4,noGutterSm:!0,mdxType:"Column"},Object(a.b)(h,{subTitle:"Color package demo",href:"https://carbon-elements.netlify.app/colors/examples/preview/",mdxType:"ResourceCard"},Object(a.b)(g,{name:"bee",mdxType:"MdxIcon"})))))}y.isMDXComponent=!0}}]);